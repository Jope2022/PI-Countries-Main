{"ast":null,"code":"import _objectSpread from\"C:/Users/jopep/Desktop/PI-Countries-Main/PI-Countries-main/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{FILTER_BY_ACTIVITIES,FILTER_BY_CONTINENT,GET_ACTIVITIES,GET_COUNTRIES,GET_DETAIL,ORDER_BY_NAME,ORDER_BY_POPULATION,POST_ACTIVITIES,SEARCH_COUNTRIES}from'../Components/Actions/index';var initialState={loading:true,countries:[],quest:[],details:[],filtered:[],activities:[]};export default function rootReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_COUNTRIES:return _objectSpread(_objectSpread({},state),{},{loading:false,countries:action.payload});case SEARCH_COUNTRIES:return _objectSpread(_objectSpread({},state),{},{quest:action.payload});case GET_ACTIVITIES:return _objectSpread(_objectSpread({},state),{},{activities:action.payload});case GET_DETAIL:return _objectSpread(_objectSpread({},state),{},{details:action.payload});case FILTER_BY_CONTINENT:var filterByContinent=action.payload===\"ALL\"?state.countries:state.countries.filter(function(country){return country.continent===action.payload;});return _objectSpread(_objectSpread({},state),{},{filtered:filterByContinent});case FILTER_BY_ACTIVITIES:var filterByActivities=state.countries.filter(function(country){return country.activities.find(function(activity){return activity.name===action.payload;});});if(action.payload==='ALL'){return _objectSpread(_objectSpread({},state),{},{fitered:state.countries});}else{return _objectSpread(_objectSpread({},state),{},{filtered:filterByActivities});}case POST_ACTIVITIES:return _objectSpread({},state);case ORDER_BY_NAME:var orderByName=action.payload===\"ASCENDANT\"?state.countries.sort(function(a,b){if(a.name<b.name)return-1;if(a.name>b.name)return 1;return 0;}):state.countries.sort(function(a,b){if(a.name<b.name)return 1;if(a.name>b.name)return-1;return 0;});return _objectSpread(_objectSpread({},state),{},{filtered:orderByName});case ORDER_BY_POPULATION:var orderByPopulation=action.payload===\"MAJOR\"?state.countries.sort(function(a,b){if(a.population<b.population)return 1;if(a.population>b.population)return-1;return 0;}):state.countries.sort(function(a,b){if(a.population<b.population)return-1;if(a.population>b.population)return 1;return 0;});return _objectSpread(_objectSpread({},state),{},{filtered:orderByPopulation});default:return state;}}","map":{"version":3,"names":["FILTER_BY_ACTIVITIES","FILTER_BY_CONTINENT","GET_ACTIVITIES","GET_COUNTRIES","GET_DETAIL","ORDER_BY_NAME","ORDER_BY_POPULATION","POST_ACTIVITIES","SEARCH_COUNTRIES","initialState","loading","countries","quest","details","filtered","activities","rootReducer","state","arguments","length","undefined","action","type","_objectSpread","payload","filterByContinent","filter","country","continent","filterByActivities","find","activity","name","fitered","orderByName","sort","a","b","orderByPopulation","population"],"sources":["C:/Users/jopep/Desktop/PI-Countries-Main/PI-Countries-main/client/src/Reducer/index.js"],"sourcesContent":["import { FILTER_BY_ACTIVITIES, FILTER_BY_CONTINENT, GET_ACTIVITIES, GET_COUNTRIES, GET_DETAIL, \r\n    ORDER_BY_NAME, ORDER_BY_POPULATION, POST_ACTIVITIES, SEARCH_COUNTRIES } from '../Components/Actions/index';\r\n\r\nconst initialState = {\r\n    loading : true,\r\n    countries : [],\r\n    quest : [],\r\n    details : [],\r\n    filtered : [],\r\n    activities : []\r\n}\r\n\r\nexport default function rootReducer( state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case GET_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                loading : false,\r\n                countries : action.payload\r\n            }\r\n\r\n        case SEARCH_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                quest : action.payload\r\n            }\r\n\r\n        case GET_ACTIVITIES:\r\n            return {\r\n                ...state,\r\n                activities: action.payload\r\n            }\r\n\r\n        case GET_DETAIL:\r\n            return {\r\n                ...state,\r\n                details: action.payload\r\n            }\r\n\r\n        case FILTER_BY_CONTINENT:\r\n            const filterByContinent = action.payload === \"ALL\" ? state.countries : state.countries.filter (country => country.continent === action.payload)\r\n            return {\r\n                ...state,\r\n                filtered: filterByContinent\r\n            }\r\n\r\n        case FILTER_BY_ACTIVITIES:\r\n            const filterByActivities = state.countries.filter (country => country.activities.find(activity => activity.name === action.payload));\r\n            if (action.payload === 'ALL') {\r\n                return {\r\n                    ...state,\r\n                    fitered: state.countries\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    filtered: filterByActivities\r\n                }\r\n            }\r\n\r\n        case POST_ACTIVITIES: \r\n            return {...state}\r\n            \r\n        case ORDER_BY_NAME:\r\n            const orderByName = action.payload === \"ASCENDANT\" ? state.countries.sort ((a, b) => {\r\n                if (a.name < b.name) return -1;\r\n                if (a.name > b.name) return 1;\r\n                return 0;\r\n            }) : state.countries.sort((a, b) => {\r\n                if (a.name < b.name) return 1;\r\n                if (a.name > b.name) return -1;\r\n                return 0;\r\n            })\r\n            return {\r\n                ...state,\r\n                filtered: orderByName\r\n            }\r\n            \r\n            case ORDER_BY_POPULATION:\r\n                const orderByPopulation = action.payload === \"MAJOR\" ? state.countries.sort ((a, b) => {\r\n                    if (a.population < b.population) return 1;\r\n                    if (a.population > b.population) return -1;\r\n                    return 0;\r\n                }) : state.countries.sort((a, b) => {\r\n                    if (a.population < b.population) return -1;\r\n                    if (a.population > b.population) return 1;\r\n                    return 0;\r\n                })\r\n                return {\r\n                    ...state,\r\n                    filtered: orderByPopulation\r\n                }\r\n        \r\n        default: return state\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { FILTER_BY_ACTIVITIES, FILTER_BY_CONTINENT, GET_ACTIVITIES, GET_COUNTRIES, GET_DETAIL, ORDER_BY_NAME, ORDER_BY_POPULATION, POST_ACTIVITIES, SEARCH_COUNTRIES, SET_CURRENT_PAGE, MAJOR_POPULATION } from \"./action-types\";\nconst initialState = {\n  loading: true,\n  countries: [],\n  quest: [],\n  details: {},\n  filtered: [],\n  activities: [],\n  currentPage: 1,\n  countriesPerPage: 10\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        loading: false,\n        fit: action.payload\n      };\n    case SET_CURRENT_PAGE:\n      return {\n        ...state,\n        currentPage: action.payload\n      };\n    case SEARCH_COUNTRIES:\n      return {\n        ...state,\n        quest: action.payload\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        activities: action.payload.filter((obj, index, self) => {\n          return index === self.findIndex(t => t.name === obj.name);\n        })\n      };\n    case GET_DETAIL:\n      return {\n        ...state,\n        details: action.payload\n      };\n    case FILTER_BY_CONTINENT:\n      const filterByContinent = action.payload === \"ALL\" ? state.countries : state.countries.filter(country => country.continent === action.payload);\n      return {\n        ...state,\n        countries: filterByContinent\n      };\n    case FILTER_BY_ACTIVITIES:\n      const filterByActivities = state.countries.filter(country => country.activities.some(activity => activity.name === action.payload)).map(country => ({\n        ...country,\n        name: country.countryId\n      }));\n      if (action.payload === 'ALL') {\n        return {\n          ...state,\n          countries: state.countries\n        };\n      } else {\n        return {\n          ...state,\n          countries: filterByActivities\n        };\n      }\n    case POST_ACTIVITIES:\n      return {\n        ...state\n      };\n    case ORDER_BY_NAME:\n      return {\n        ...state,\n        countries: action.payload === \"ASCENDANT\" ? [...state.countries].sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        }) : [...state.countries].sort((a, b) => {\n          return b.name.localeCompare(a.name);\n        })\n      };\n    case ORDER_BY_POPULATION:\n      const sortedCountries = [...state.countries].sort((a, b) => {\n        if (action.payload === MAJOR_POPULATION) {\n          return b.population - a.population;\n        } else {\n          return a.population - b.population;\n        }\n      });\n      return {\n        ...state,\n        countries: [...sortedCountries]\n      };\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["FILTER_BY_ACTIVITIES","FILTER_BY_CONTINENT","GET_ACTIVITIES","GET_COUNTRIES","GET_DETAIL","ORDER_BY_NAME","ORDER_BY_POPULATION","POST_ACTIVITIES","SEARCH_COUNTRIES","SET_CURRENT_PAGE","MAJOR_POPULATION","initialState","loading","countries","quest","details","filtered","activities","currentPage","countriesPerPage","rootReducer","state","arguments","length","undefined","action","type","fit","payload","filter","obj","index","self","findIndex","t","name","filterByContinent","country","continent","filterByActivities","some","activity","map","countryId","sort","a","b","localeCompare","sortedCountries","population"],"sources":["C:/Users/jopep/Desktop/PI-Countries-Main/PI-Countries-main/client/src/Components/redux/reducer.js"],"sourcesContent":["import { FILTER_BY_ACTIVITIES, FILTER_BY_CONTINENT, GET_ACTIVITIES, GET_COUNTRIES, GET_DETAIL, \r\n    ORDER_BY_NAME, ORDER_BY_POPULATION, POST_ACTIVITIES, SEARCH_COUNTRIES, \r\n    SET_CURRENT_PAGE, MAJOR_POPULATION } from  \"./action-types\";\r\n\r\nconst initialState = {\r\n    loading : true,\r\n    countries : [],\r\n    quest : [],\r\n    details : {},\r\n    filtered : [],\r\n    activities : [],\r\n    currentPage: 1,\r\n    countriesPerPage: 10\r\n};\r\n\r\nexport default function rootReducer( state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case GET_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                loading : false,\r\n                fit : action.payload\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.payload \r\n            };\r\n\r\n        case SEARCH_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                quest : action.payload\r\n            }\r\n\r\n        case GET_ACTIVITIES:\r\n            return {\r\n                ...state,\r\n                activities: action.payload.filter((obj, index, self) => {\r\n                    return index === self.findIndex((t) => (\r\n                      t.name === obj.name\r\n                    ));\r\n                  })\r\n            }\r\n\r\n        case GET_DETAIL:\r\n            return {\r\n                ...state,\r\n                details: action.payload\r\n            }\r\n\r\n        case FILTER_BY_CONTINENT:\r\n            const filterByContinent = action.payload === \"ALL\" ? state.countries : \r\n            state.countries.filter (country => country.continent === action.payload)\r\n            return {\r\n                ...state,\r\n                countries: filterByContinent\r\n            } \r\n\r\n        case FILTER_BY_ACTIVITIES:\r\n             const filterByActivities = state.countries.filter (country => country.activities.some(\r\n                activity => activity.name === action.payload))\r\n                .map(country => ({...country, name: country.countryId}));\r\n            if (action.payload === 'ALL') {\r\n                return {\r\n                    ...state,\r\n                    countries: state.countries\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    ...state,\r\n                    countries: filterByActivities\r\n                }\r\n            }\r\n\r\n        case POST_ACTIVITIES: \r\n            return {...state}\r\n            \r\n        case ORDER_BY_NAME:\r\n             return {\r\n                ...state,\r\n                countries: action.payload === \"ASCENDANT\" ? [...state.countries].sort ((a, b) => {\r\n                    return a.name.localeCompare(b.name);\r\n                 }) : [...state.countries].sort((a, b) => {\r\n                    return b.name.localeCompare(a.name);\r\n                 })\r\n            }\r\n        \r\n            case ORDER_BY_POPULATION:\r\n                    const sortedCountries = [...state.countries].sort((a, b) => {\r\n                        if (action.payload === MAJOR_POPULATION) {\r\n                            return b.population - a.population;\r\n                         } else {\r\n                             return a.population - b.population;\r\n                         }\r\n                    });\r\n                    return {\r\n                        ...state,\r\n                        countries: [...sortedCountries]\r\n                    }\r\n                default: \r\n                    return state;\r\n     }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}